<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<artifactId>codebank-parent</artifactId>
	<packaging>pom</packaging>


	<name>Ossez CodeBank Parent</name>
	<url>http://commons.apache.org/commons-parent-pom.html</url>
	<description>The Apache Commons Parent POM provides common settings for all Apache Commons components.</description>
	<issueManagement>
		<system>jira</system>
		<url>http://issues.apache.org/jira/browse/COMMONSSITE</url>
	</issueManagement>

	<prerequisites>
		<maven>3.0.5</maven>
	</prerequisites>

	<ciManagement>
		<system>jenkins</system>
		<url>https://builds.apache.org/</url>
	</ciManagement>

	<!-- In release 31, the maven.compile.* properties were corrected to maven.compiler.* 
		[See COMMONSSITE-69] If updating from a previous version, please check the 
		property definitions Starting with version 22, the RAT plugin has changed 
		Maven group and id, so any existing configuration needs to be updated. To 
		fix component POMs, please change any occurrences of: <groupId>org.codehaus.mojo</groupId> 
		<artifactId>rat-maven-plugin</artifactId> to the new values: <groupId>org.apache.rat</groupId> 
		<artifactId>apache-rat-plugin</artifactId> Site deployment =============== 
		Cannot define this here at present, see https://issues.apache.org/jira/browse/COMMONSSITE-26. 
		The following should be added to the component POM: <distributionManagement> 
		<site> <id>commons.site</id> <name>Apache Commons Site SVN</name> <url>scm:svn:${commons.scmPubUrl}</url> 
		</site> </distributionManagement> Alternatively you can map the component's 
		existing site id to the commons.scmPubServer property. Coverage tool selection 
		======================= Starting with release 30, there are optional profiles 
		for both Cobertura and JaCoCo. These can be enabled independently on the 
		command-line: mvn site -Pcobertura -Pjacoco Or the component can define a 
		default coverage tool by creating either (or both) of the following files: 
		src/site/resources/profile.cobertura src/site/resources/profile.jacoco These 
		can later be overridden by cancelling the profile: mvn site -P!jacoco -->

	<!-- This section *must* be overwritten by subprojects. It is only to allow 
		a release of the commons-parent POM. -->
	<scm>
		<connection>scm:svn:http://svn.apache.org/repos/asf/commons/proper/commons-parent/trunk</connection>
		<developerConnection>scm:svn:https://svn.apache.org/repos/asf/commons/proper/commons-parent/trunk</developerConnection>
		<url>http://svn.apache.org/viewvc/commons/proper/commons-parent/trunk</url>
	</scm>

	<mailingLists>
		<!-- N.B. commons-site now uses the Apache POM so has its own copy of the 
			mailing list definitions -->
		<!-- Components should normally override the default mailing list report 
			by using the comnand mvn commons:mail-page This generates the file src/site/xdoc/mail-lists.xml 
			which when processed will replace the PIR version. -->
		<!-- Changes to this list should be synchronised with the commons build 
			plugin -->
		<mailingList>
			<name>Commons User List</name>
			<subscribe>user-subscribe@commons.apache.org</subscribe>
			<unsubscribe>user-unsubscribe@commons.apache.org</unsubscribe>
			<post>user@commons.apache.org</post>
			<archive>http://mail-archives.apache.org/mod_mbox/commons-user/</archive>
			<otherArchives>
				<otherArchive>http://markmail.org/list/org.apache.commons.users/</otherArchive>
				<otherArchive>http://old.nabble.com/Commons---User-f319.html</otherArchive>
				<otherArchive>http://www.mail-archive.com/user@commons.apache.org/</otherArchive>
				<otherArchive>http://news.gmane.org/gmane.comp.jakarta.commons.user</otherArchive>
			</otherArchives>
		</mailingList>
		<mailingList>
			<name>Commons Dev List</name>
			<subscribe>dev-subscribe@commons.apache.org</subscribe>
			<unsubscribe>dev-unsubscribe@commons.apache.org</unsubscribe>
			<post>dev@commons.apache.org</post>
			<archive>http://mail-archives.apache.org/mod_mbox/commons-dev/</archive>
			<otherArchives>
				<otherArchive>http://markmail.org/list/org.apache.commons.dev/</otherArchive>
				<otherArchive>http://old.nabble.com/Commons---Dev-f317.html</otherArchive>
				<otherArchive>http://www.mail-archive.com/dev@commons.apache.org/</otherArchive>
				<otherArchive>http://news.gmane.org/gmane.comp.jakarta.commons.devel</otherArchive>
			</otherArchives>
		</mailingList>
		<mailingList>
			<name>Commons Issues List</name>
			<subscribe>issues-subscribe@commons.apache.org</subscribe>
			<unsubscribe>issues-unsubscribe@commons.apache.org</unsubscribe>
			<archive>http://mail-archives.apache.org/mod_mbox/commons-issues/</archive>
			<otherArchives>
				<otherArchive>http://markmail.org/list/org.apache.commons.issues/</otherArchive>
				<otherArchive>http://old.nabble.com/Commons---Issues-f25499.html</otherArchive>
				<otherArchive>http://www.mail-archive.com/issues@commons.apache.org/</otherArchive>
			</otherArchives>
		</mailingList>
		<mailingList>
			<name>Commons Commits List</name>
			<subscribe>commits-subscribe@commons.apache.org</subscribe>
			<unsubscribe>commits-unsubscribe@commons.apache.org</unsubscribe>
			<archive>http://mail-archives.apache.org/mod_mbox/commons-commits/</archive>
			<otherArchives>
				<otherArchive>http://markmail.org/list/org.apache.commons.commits/</otherArchive>
				<otherArchive>http://www.mail-archive.com/commits@commons.apache.org/</otherArchive>
			</otherArchives>
		</mailingList>
		<mailingList>
			<name>Apache Announce List</name>
			<subscribe>announce-subscribe@apache.org</subscribe>
			<unsubscribe>announce-unsubscribe@apache.org</unsubscribe>
			<archive>http://mail-archives.apache.org/mod_mbox/www-announce/</archive>
			<otherArchives>
				<otherArchive>http://markmail.org/list/org.apache.announce/</otherArchive>
				<otherArchive>http://old.nabble.com/Apache-News-and-Announce-f109.html</otherArchive>
				<otherArchive>http://www.mail-archive.com/announce@apache.org/</otherArchive>
				<otherArchive>http://news.gmane.org/gmane.comp.apache.announce</otherArchive>
			</otherArchives>
		</mailingList>
	</mailingLists>

	<dependencies>
		<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!-- DEPENDENCY GROUPS -->
		<!-- 1. LOGGING WITH SELF4J AND LOG4J2 -->
		<!-- 2. DATABASE AND HIBERNATE -->
		<!-- 3. APACHE COMMONS -->
		<!-- 4. UTILITIES -->
		<!-- 5. CLOUDS -->
		<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

		<!-- LOGGING WITH SELF4J AND LOG4J2 -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.8.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.8.1</version>
		</dependency>
	</dependencies>
	<build>
		<!-- TODO find a better way to add N&L files to jars and test jars See 
			also maven-remote-resources-plugin configuration below. -->
		<resources>
			<!-- This is the default setting from the super-pom -->
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<!-- hack to ensure the N&L appear in jars -->
			<resource>
				<directory>${basedir}</directory>
				<targetPath>META-INF</targetPath>
				<includes>
					<include>NOTICE.txt</include>
					<include>LICENSE.txt</include>
				</includes>
			</resource>
		</resources>
		<!-- ensure test jars also get NOTICE & LICENSE files -->
		<testResources>
			<!-- This is the default setting from the super-pom -->
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
			<!-- hack to ensure the N&L appear in jars -->
			<testResource>
				<directory>${basedir}</directory>
				<targetPath>META-INF</targetPath>
				<includes>
					<include>NOTICE.txt</include>
					<include>LICENSE.txt</include>
				</includes>
			</testResource>
		</testResources>
		<pluginManagement>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>svn</id>
			<activation>
				<file>
					<exists>.svn</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>buildnumber-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>validate</phase>
								<goals>
									<goal>create</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<!-- Use committed revision so it does not change every time svn update 
								is run -->
							<useLastCommittedRevision>true</useLastCommittedRevision>
							<!-- default revision number if unavailable -->
							<revisionOnScmFailure>??????</revisionOnScmFailure>
							<!-- svnjava works even if an svn command-line client is not on the 
								path -->
							<providerImplementations>
								<svn>javasvn</svn>
							</providerImplementations>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Add an automatic module name to the manifest if the file 'profile.module-name' 
				exists. The name must be provided in the property 'commons.module.name'. -->
			<id>module-name</id>
			<activation>
				<file>
					<exists>profile.module-name</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<configuration>
							<archive combine.children="append">
								<manifestEntries>
									<Automatic-Module-Name>${commons.module.name}</Automatic-Module-Name>
								</manifestEntries>
							</archive>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Make the version parts of the maven.compiler.target property available 
				as separate properties, so that they can be used to define the java signature 
				artifactId used by animal-sniffer etc. -->
			<id>parse-target-version</id>
			<activation>
				<property>
					<!-- This property should always be defined. The intention is to ensure 
						that the profile is always enabled. (activeByDefault only applies if other 
						profiles are not enabled) -->
					<name>user.home</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>parse-version</id>
								<!-- default is: <phase>validate</phase> -->
								<goals>
									<goal>parse-version</goal>
								</goals>
								<configuration>
									<propertyPrefix>javaTarget</propertyPrefix>
									<versionString>${maven.compiler.target}</versionString>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Runs the Animal Sniffer plugin to check that generated code does not 
			included references to methods/classes etc that are not present in the standard 
			Java runtime for the defined target version. To bypass the checks, define 
			"animal.sniffer.skip" as true, or create the file "src/site/resources/profile.noanimal" -->

		<profile>
			<id>animal-sniffer</id>
			<activation>
				<!-- active unless the file is found -->
				<file>
					<missing>src/site/resources/profile.noanimal</missing>
				</file>
			</activation>

			<properties>
				<!-- define this as a property to allow command-line override -->
				<animal-sniffer.signature>java${javaTarget.majorVersion}${javaTarget.minorVersion}</animal-sniffer.signature>
			</properties>

			<build>
				<plugins>

					<!-- Run the Animal Sniffer checks -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>animal-sniffer-maven-plugin</artifactId>
						<version>${commons.animal-sniffer.version}</version>
						<executions>
							<execution>
								<id>checkAPIcompatibility</id>
								<!-- default is: <phase>process-classes</phase> -->
								<!-- Note: if the plugin is ever enhanced to check test classes it 
									will presumably need to be bound to process-test-classes instead -->
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<signature>
								<groupId>org.codehaus.mojo.signature</groupId>
								<artifactId>${animal-sniffer.signature}</artifactId>
								<version>${commons.animal-sniffer.signature.version}</version>
							</signature>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>jacoco</id>
			<activation>
				<!-- N.B. in spite of what the Maven docs may say, activation conditions 
					are ORed together, see: http://jira.codehaus.org/browse/MNG-4565 Fairly useless, 
					but that's what was done in http://jira.codehaus.org/browse/MNG-3106 So we 
					cannot also check for Java 1.5+ This should not be a problem now as the profile 
					is optional. Components that still target Java 1.4 or earlier just need to 
					ensure they don't use JaCoCo by default. -->
				<file>
					<exists>src/site/resources/profile.jacoco</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${commons.jacoco.version}</version>
					</plugin>
				</plugins>
			</build>
			<reporting>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${commons.jacoco.version}</version>
					</plugin>
				</plugins>
			</reporting>
		</profile>

		<profile>
			<id>cobertura</id>
			<activation>
				<file>
					<exists>src/site/resources/profile.cobertura</exists>
				</file>
			</activation>
			<reporting>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>cobertura-maven-plugin</artifactId>
						<version>${commons.cobertura.version}</version>
					</plugin>
				</plugins>
			</reporting>
		</profile>

		<profile>
			<id>clirr</id>
			<activation>
				<file>
					<exists>src/site/resources/profile.clirr</exists>
				</file>
			</activation>
			<reporting>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>clirr-maven-plugin</artifactId>
						<version>${commons.clirr.version}</version>
					</plugin>
				</plugins>
			</reporting>
		</profile>

		<!-- alternative to clirr, will fail build if binary compatibility is broken -->
		<profile>
			<id>japicmp</id>
			<properties>
				<japicmp.skip>false</japicmp.skip>
			</properties>
			<activation>
				<file>
					<exists>src/site/resources/profile.japicmp</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.siom79.japicmp</groupId>
						<artifactId>japicmp-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>cmp</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<reporting>
				<plugins>
					<plugin>
						<groupId>com.github.siom79.japicmp</groupId>
						<artifactId>japicmp-maven-plugin</artifactId>
						<version>${commons.japicmp.version}</version>
					</plugin>
				</plugins>
			</reporting>
		</profile>

		<!-- Profile for Commons releases via Nexus. Assembles artifacts, creates 
			source and javadoc jars, signs them and adds hashes. -->
		<profile>
			<id>release</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-install-plugin</artifactId>
						<configuration>
							<createChecksum>true</createChecksum>
						</configuration>
					</plugin>
					<plugin>
						<artifactId>maven-release-plugin</artifactId>
						<configuration>
							<!-- Pass these arguments to the deploy plugin. -->
							<arguments>-Prelease</arguments>
						</configuration>
					</plugin>
					<plugin>
						<artifactId>maven-javadoc-plugin</artifactId>
						<executions>
							<execution>
								<id>create-javadoc-jar</id>
								<goals>
									<goal>javadoc</goal>
									<goal>jar</goal>
								</goals>
								<phase>package</phase>
							</execution>
						</executions>
						<configuration>
							<source>${maven.compiler.source}</source>
						</configuration>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${commons.assembly-plugin.version}</version>
						<inherited>true</inherited>
						<executions>
							<execution>
								<goals>
									<goal>single</goal>
								</goals>
								<!-- COMMONSSITE-87 Ensure this runs after all package phase plugins -->
								<phase>verify</phase>
							</execution>
						</executions>
					</plugin>
					<!-- We want to sign the artifact, the POM, and all attached artifacts -->
					<plugin>
						<artifactId>maven-gpg-plugin</artifactId>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.commons</groupId>
						<artifactId>commons-release-plugin</artifactId>
						<version>${commons.release-plugin.version}</version>
						<executions>
							<execution>
								<id>detatch-distributions</id>
								<phase>verify</phase>
								<goals>
									<goal>detach-distributions</goal>
								</goals>
							</execution>
							<execution>
								<id>stage-distributions</id>
								<phase>deploy</phase>
								<goals>
									<goal>stage-distributions</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- profile to update the Apache parent pom profile of the same name to 
			better suit the requirements of Apache Commons. [Requires further work] -->
		<profile>
			<id>apache-release</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-release-plugin</artifactId>
						<configuration>
							<releaseProfiles>apache-release</releaseProfiles>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-test-sources</id>
								<goals>
									<goal>test-jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-install-plugin</artifactId>
						<configuration>
							<createChecksum>true</createChecksum>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>test-jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Profile for running the build using JDK 1.3 (JAVA_1_3_HOME needs to 
			be defined, e.g. in settings.xml or an environment variable) -->
		<profile>
			<id>java-1.3</id>
			<properties>
				<commons.compiler.fork>true</commons.compiler.fork>
				<commons.compiler.compilerVersion>1.3</commons.compiler.compilerVersion>
				<commons.compiler.javac>${JAVA_1_3_HOME}/bin/javac</commons.compiler.javac>
				<commons.surefire.java>${JAVA_1_3_HOME}/bin/java</commons.surefire.java>
			</properties>
		</profile>

		<!-- Profile for running the build using JDK 1.4 (JAVA_1_4_HOME needs to 
			be defined, e.g. in settings.xml or an environment variable) -->
		<profile>
			<id>java-1.4</id>
			<properties>
				<commons.compiler.fork>true</commons.compiler.fork>
				<commons.compiler.compilerVersion>1.4</commons.compiler.compilerVersion>
				<commons.compiler.javac>${JAVA_1_4_HOME}/bin/javac</commons.compiler.javac>
				<commons.surefire.java>${JAVA_1_4_HOME}/bin/java</commons.surefire.java>
				<!-- later versions of surefire don't support Java 1.4 -->
				<commons.surefire.version>2.11</commons.surefire.version>
			</properties>
		</profile>

		<!-- Profile for running the build using JDK 1.5 (JAVA_1_5_HOME needs to 
			be defined, e.g. in settings.xml or an environment variable) -->
		<profile>
			<id>java-1.5</id>
			<properties>
				<commons.compiler.fork>true</commons.compiler.fork>
				<commons.compiler.compilerVersion>1.5</commons.compiler.compilerVersion>
				<commons.compiler.javac>${JAVA_1_5_HOME}/bin/javac</commons.compiler.javac>
				<commons.surefire.java>${JAVA_1_5_HOME}/bin/java</commons.surefire.java>
			</properties>
		</profile>

		<!-- Profile for running the build using JDK 1.6 (JAVA_1_6_HOME needs to 
			be defined, e.g. in settings.xml or an environment variable) -->
		<profile>
			<id>java-1.6</id>
			<properties>
				<commons.compiler.fork>true</commons.compiler.fork>
				<commons.compiler.compilerVersion>1.6</commons.compiler.compilerVersion>
				<commons.compiler.javac>${JAVA_1_6_HOME}/bin/javac</commons.compiler.javac>
				<commons.surefire.java>${JAVA_1_6_HOME}/bin/java</commons.surefire.java>
			</properties>
		</profile>

		<!-- Profile for running the build using JDK 1.7 (JAVA_1_7_HOME needs to 
			be defined, e.g. in settings.xml or an environment variable) -->
		<profile>
			<id>java-1.7</id>
			<properties>
				<commons.compiler.fork>true</commons.compiler.fork>
				<commons.compiler.compilerVersion>1.7</commons.compiler.compilerVersion>
				<commons.compiler.javac>${JAVA_1_7_HOME}/bin/javac</commons.compiler.javac>
				<commons.surefire.java>${JAVA_1_7_HOME}/bin/java</commons.surefire.java>
			</properties>
		</profile>

		<!-- Profile for running the build using JDK 1.8 (JAVA_1_8_HOME needs to 
			be defined, e.g. in settings.xml or an environment variable) -->
		<profile>
			<id>java-1.8</id>
			<properties>
				<commons.compiler.fork>true</commons.compiler.fork>
				<commons.compiler.compilerVersion>1.8</commons.compiler.compilerVersion>
				<commons.compiler.javac>${JAVA_1_8_HOME}/bin/javac</commons.compiler.javac>
				<commons.surefire.java>${JAVA_1_8_HOME}/bin/java</commons.surefire.java>
			</properties>
		</profile>

		<!-- Profile for running the build using JDK 1.9 (JAVA_1_9_HOME needs to 
			be defined, e.g. in settings.xml or an environment variable) -->
		<profile>
			<id>java-1.9</id>
			<properties>
				<commons.compiler.fork>true</commons.compiler.fork>
				<commons.compiler.compilerVersion>1.9</commons.compiler.compilerVersion>
				<commons.compiler.javac>${JAVA_1_9_HOME}/bin/javac</commons.compiler.javac>
				<commons.surefire.java>${JAVA_1_9_HOME}/bin/java</commons.surefire.java>
			</properties>
		</profile>

		<!-- Profile for running the build using JDK 1.10 (JAVA_1_10_HOME needs 
			to be defined, e.g. in settings.xml or an environment variable) -->
		<profile>
			<id>java-1.10</id>
			<properties>
				<commons.compiler.fork>true</commons.compiler.fork>
				<commons.compiler.compilerVersion>1.10</commons.compiler.compilerVersion>
				<commons.compiler.javac>${JAVA_1_10_HOME}/bin/javac</commons.compiler.javac>
				<commons.surefire.java>${JAVA_1_10_HOME}/bin/java</commons.surefire.java>
			</properties>
		</profile>

		<!-- Profile for running the build using JDK 1.11 (JAVA_1_11_HOME needs 
			to be defined, e.g. in settings.xml or an environment variable) -->
		<profile>
			<id>java-1.11</id>
			<properties>
				<commons.compiler.fork>true</commons.compiler.fork>
				<commons.compiler.compilerVersion>1.11</commons.compiler.compilerVersion>
				<commons.compiler.javac>${JAVA_1_11_HOME}/bin/javac</commons.compiler.javac>
				<commons.surefire.java>${JAVA_1_11_HOME}/bin/java</commons.surefire.java>
			</properties>
		</profile>

		<!-- N.B. when adding new java profiles, be sure to update the _removeheaders 
			list in the maven_bundle_plugin configuration -->

		<!-- | Profile to allow testing of deploy phase | e.g. | mvn deploy -Ptest-deploy 
			-Prelease -Dgpg.skip -->
		<profile>
			<id>test-deploy</id>
			<properties>
				<altDeploymentRepository>id::default::file:target/deploy</altDeploymentRepository>
				<commons.release.dryRun>true</commons.release.dryRun>
			</properties>
		</profile>

		<profile>
			<!-- Generate release notes in top-level directory from src/changes/changes.xml 
				Usage: mvn changes:announcement-generate -Prelease-notes [-Dchanges.version=nnn] 
				Defining changes.version allows one to create the RN without first removing 
				the SNAPSHOT suffix. Requires file src/changes/release-notes.vm. A sample 
				template is available from: https://svn.apache.org/repos/asf/commons/proper/commons-parent/trunk/src/changes/release-notes.vm -->
			<id>release-notes</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-changes-plugin</artifactId>
						<version>${commons.changes.version}</version>
						<configuration>
							<template>release-notes.vm</template>
							<templateDirectory>src/changes</templateDirectory>
							<runOnlyAtExecutionRoot>true</runOnlyAtExecutionRoot>
							<announcementDirectory>.</announcementDirectory>
							<announcementFile>RELEASE-NOTES.txt</announcementFile>
							<announceParameters>
								<releaseVersion>${commons.release.version}</releaseVersion>
							</announceParameters>
						</configuration>
						<executions>
							<execution>
								<id>create-release-notes</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>announcement-generate</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Automatically run the buildnumber plugin unless the buildNumber.skip 
			property is defined as true -->
		<profile>
			<id>svn-buildnumber</id>
			<activation>
				<property>
					<name>!buildNumber.skip</name>
					<value>!true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>buildnumber-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>generate-resources</phase>
								<goals>
									<goal>create</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<!-- Use committed revision so it does not change every time svn update 
								is run -->
							<useLastCommittedRevision>true</useLastCommittedRevision>
							<!-- default revision number if unavailable -->
							<revisionOnScmFailure>??????</revisionOnScmFailure>
							<doCheck>false</doCheck>
							<doUpdate>false</doUpdate>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- optional profile to use javasvn instead of the SVN CLI for the buildNumber 
			plugin -->
		<profile>
			<id>javasvn</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>buildnumber-maven-plugin</artifactId>
						<configuration>
							<providerImplementations>
								<svn>javasvn</svn>
							</providerImplementations>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- profile to allow the use of plugin versions that require Java 7+ -->
		<profile>
			<id>jdk7-plugin-fix-version</id>
			<activation>
				<jdk>[1.7,)</jdk>
			</activation>
			<properties>
			</properties>
		</profile>

		<!-- allow simple creation of the site without any optional reports -->
		<profile>
			<id>site-basic</id>
			<properties>
				<skipTests>true</skipTests>
				<maven.javadoc.skip>true</maven.javadoc.skip>
				<cobertura.skip>true</cobertura.skip>
				<findbugs.skip>true</findbugs.skip>
				<spotbugs.skip>true</spotbugs.skip>
				<checkstyle.skip>true</checkstyle.skip>
				<clirr.skip>true</clirr.skip>
				<changes.jira.skip>true</changes.jira.skip>
				<rat.skip>true</rat.skip> <!-- from version 0.12 -->
				<jacoco.skip>true</jacoco.skip>
				<japicmp.skip>true</japicmp.skip>
				<skipSurefireReport>true</skipSurefireReport>
			</properties>
		</profile>

		<profile>
			<id>travis-cobertura</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>cobertura-maven-plugin</artifactId>
						<version>${commons.cobertura.version}</version>
						<configuration>
							<formats>
								<format>xml</format>
							</formats>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.eluder.coveralls</groupId>
						<artifactId>coveralls-maven-plugin</artifactId>
						<version>${commons.coveralls.version}</version>
						<configuration>
							<timestampFormat>${commons.coveralls.timestampFormat}</timestampFormat>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>travis-jacoco</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${commons.jacoco.version}</version>
					</plugin>
					<plugin>
						<groupId>org.eluder.coveralls</groupId>
						<artifactId>coveralls-maven-plugin</artifactId>
						<version>${commons.coveralls.version}</version>
						<configuration>
							<timestampFormat>${commons.coveralls.timestampFormat}</timestampFormat>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

	<properties>
		<!-- configuration bits for cutting a release candidate, must be overridden 
			by components -->
		<commons.release.version>${project.version}</commons.release.version>
		<commons.rc.version>RC1</commons.rc.version>
		<commons.jira.id>COMMONSSITE</commons.jira.id>

		<!-- Default configuration for compiler source and target JVM -->
		<!-- Do NOT change this; it must remain as 1.3 -->
		<!-- It's important that child POMs don't need to change when the parent 
			POM is updated. At the time when these properties were introduced, the default 
			Java version was 1.3. Thus components that failed to define the version would 
			not be affected by updates to the Commons Parent or its parent the Apache 
			pom. Of course most if not all components now define the properties. However 
			it's still important to keep the properties as they effectively force child 
			poms to define the Java version they require. -->
		<maven.compiler.source>1.3</maven.compiler.source>
		<maven.compiler.target>1.3</maven.compiler.target>

		<!-- compiler and surefire plugin settings for "java" profiles -->
		<commons.compiler.fork>false</commons.compiler.fork>
		<commons.compiler.compilerVersion />
		<commons.compiler.javac />

		<!-- plugin versions (allows same value in reporting and build sections; 
			also allows easy override) -->
		<commons.build-plugin.version>1.9</commons.build-plugin.version>
		<commons.release-plugin.version>1.4</commons.release-plugin.version>
		<commons.surefire.version>2.22.1</commons.surefire.version>
		<commons.failsafe.version>2.22.1</commons.failsafe.version>
		<commons.surefire-report.version>2.22.1</commons.surefire-report.version>
		<commons.javadoc.version>3.0.1</commons.javadoc.version>
		<commons.rat.version>0.13</commons.rat.version>
		<commons.changes.version>2.12.1</commons.changes.version>
		<commons.clirr.version>2.8</commons.clirr.version>
		<commons.japicmp.version>0.13.0</commons.japicmp.version>
		<commons.jxr.version>3.0.0</commons.jxr.version>
		<commons.project-info.version>3.0.0</commons.project-info.version>
		<commons.wagon-ssh.version>3.2.0</commons.wagon-ssh.version>
		<!-- Note: Maven site plugin 3.5.1 is the latest version but is not a direct 
			replacement: http://maven.apache.org/plugins/maven-site-plugin/migrate.html 
			In particular, adding CDATA to header and footer sections is not backwards 
			compatible. I.e. these have to be updated at the same time. Also it causes 
			the following errors: [ERROR] Failed to execute goal org.apache.maven.plugins:maven-site-plugin:3.5.1:site 
			(default-site) on project commons-parent: Execution default-site of goal 
			org.apache.maven.plugins:maven-site-plugin:3.5.1:site failed: A required 
			class was missing while executing org.apache.maven.plugins:maven-site-plugin:3.5.1:site: 
			org/apache/maven/doxia/sink/impl/XhtmlBaseSink This is because Apache POM 
			17 forces an older version of Doxia core: https://mail-archives.apache.org/mod_mbox/maven-users/201602.mbox/%3C2337255.xU7aS9G1qr@herve-desktop%3E 
			The same error applies when running with version 3.5. Since the version is 
			defined as a property, the CP version can be overridden as follows if necessary: 
			mvn site -Dcommons.site-plugin.version=3.5.1 You will also need to add a 
			dependency on Doxia core: <artifactId>maven-site-plugin</artifactId> <dependencies> 
			<dependency> <groupId>org.apache.maven.doxia</groupId> <artifactId>doxia-core</artifactId> 
			<version>1.8</version> </dependency> </dependencies> -->
		<commons.jar-plugin.version>3.1.0</commons.jar-plugin.version>
		<commons.assembly-plugin.version>3.1.0</commons.assembly-plugin.version>
		<commons.site-plugin.version>3.7.1</commons.site-plugin.version>
		<commons.jacoco.version>0.8.2</commons.jacoco.version>
		<commons.cobertura.version>2.7</commons.cobertura.version>
		<commons.coveralls.version>4.3.0</commons.coveralls.version>
		<commons.coveralls.timestampFormat>EpochMillis</commons.coveralls.timestampFormat>
		<commons.jdepend.version>2.0</commons.jdepend.version>
		<commons.compiler.version>3.8.0</commons.compiler.version>
		<commons.scm-publish.version>1.1</commons.scm-publish.version>
		<commons.findbugs.version>3.0.5</commons.findbugs.version>
		<commons.spotbugs.version>3.1.6</commons.spotbugs.version>
		<commons.felix.version>4.1.0</commons.felix.version>
		<commons.build-helper.version>3.0.0</commons.build-helper.version>
		<commons.animal-sniffer.version>1.16</commons.animal-sniffer.version>
		<!-- Almost all signatures use version 1.0. Allow override just in case -->
		<commons.animal-sniffer.signature.version>1.0</commons.animal-sniffer.signature.version>

		<!-- Default values for the download-page generation by commons-build-plugin -->
		<commons.release.name>${project.artifactId}-${commons.release.version}</commons.release.name>
		<commons.release.desc />
		<commons.binary.suffix>-bin</commons.binary.suffix>
		<commons.release.2.name>${project.artifactId}-${commons.release.2.version}</commons.release.2.name>
		<commons.release.2.desc />
		<commons.release.2.binary.suffix>-bin</commons.release.2.binary.suffix>
		<commons.release.3.name>${project.artifactId}-${commons.release.3.version}</commons.release.3.name>
		<commons.release.3.desc />
		<commons.release.3.binary.suffix>-bin</commons.release.3.binary.suffix>

		<!-- Default values for the jacoco-maven-plugin reports -->
		<commons.jacoco.classRatio>1.00</commons.jacoco.classRatio>
		<commons.jacoco.instructionRatio>0.90</commons.jacoco.instructionRatio>
		<commons.jacoco.methodRatio>0.95</commons.jacoco.methodRatio>
		<commons.jacoco.branchRatio>0.85</commons.jacoco.branchRatio>
		<commons.jacoco.complexityRatio>0.85</commons.jacoco.complexityRatio>
		<commons.jacoco.lineRatio>0.90</commons.jacoco.lineRatio>
		<commons.jacoco.haltOnFailure>false</commons.jacoco.haltOnFailure>

		<!-- The Commons component id is used on the distribution server, for example: 
			- Use dbcp instead of dbcp2. - Use collections instead of collections4. - 
			Use lang instead of lang3. - Use pool instead of pool2. - and so on... -->
		<commons.componentid>${project.artifactId}</commons.componentid>

		<!-- The package id is substring of the package name from o.a.commons.(.*)., 
			for example: - Use dbcp2 instead of dbcp. - Use collections4 instead of collections. 
			- Use lang3 instead of lang. - Use pool2 instead of pool. - and so on... -->
		<commons.packageId>${project.artifactId}</commons.packageId>

		<!-- Configuration properties for the OSGi maven-bundle-plugin -->
		<commons.osgi.symbolicName>org.apache.commons.${commons.packageId}</commons.osgi.symbolicName>
		<commons.osgi.export>org.apache.commons.*;version=${project.version};-noimport:=true</commons.osgi.export>
		<commons.osgi.import>*</commons.osgi.import>
		<commons.osgi.dynamicImport />
		<commons.osgi.private />
		<commons.osgi.excludeDependencies>true</commons.osgi.excludeDependencies>

		<!-- location of any manifest file used by maven-jar-plugin -->
		<commons.manifestfile>${project.build.directory}/osgi/MANIFEST.MF</commons.manifestfile>

		<!-- Make the deployment protocol pluggable. This allows to switch to other 
			protocols like scpexe, which some users prefer over scp. -->
		<commons.deployment.protocol>scp</commons.deployment.protocol>

		<!-- Encoding of Java source files: ensures that the compiler and the javadoc 
			generator use the right encoding. Subprojects may overwrite this, if they 
			are using another encoding. -->
		<commons.encoding>iso-8859-1</commons.encoding>
		<!-- used in this pom to provide the Javadoc HTML file encoding -->
		<commons.docEncoding>${commons.encoding}</commons.docEncoding>
		<!-- Define source encoding for filtering; used by general plugins -->
		<project.build.sourceEncoding>${commons.encoding}</project.build.sourceEncoding>
		<!-- This is used by reporting plugins -->
		<project.reporting.outputEncoding>${commons.encoding}</project.reporting.outputEncoding>

		<!-- Javadoc link to Java API. Default is Java 1.7; components can override 
			to other versions -->
		<commons.javadoc.java.link>http://docs.oracle.com/javase/7/docs/api/</commons.javadoc.java.link>
		<commons.javadoc.javaee.link>http://docs.oracle.com/javaee/6/api/</commons.javadoc.javaee.link>

		<!-- build meta inf -->
		<maven.build.timestamp.format>yyyy-MM-dd HH:mm:ssZ</maven.build.timestamp.format>
		<implementation.build>${scmBranch}@r${buildNumber};
			${maven.build.timestamp}</implementation.build>

		<!-- Allow Clirr severity to be overriden by the command-line option -DminSeverity=level -->
		<minSeverity>info</minSeverity>

		<!-- Control number of issues retrieved from JIRA with changes plugin -->
		<commons.changes.maxEntries>100</commons.changes.maxEntries>

		<!-- Allow surefire-report aggregation to be easily configured for multi-module 
			projects -->
		<commons.surefire-report.aggregate>false</commons.surefire-report.aggregate>

		<!-- Allow changes Jira report to be restricted to just the current version 
			(plugin default is false) -->
		<commons.changes.onlyCurrentVersion>false</commons.changes.onlyCurrentVersion>
		<!-- Allow changes Jira report maxEntries to be overridden (plugin default 
			100) -->
		<commons.changes.maxEntries>100</commons.changes.maxEntries>
		<!-- Allow changes Jira report runOnlyAtExecutionRoot to be overridden 
			(plugin default is false) -->
		<commons.changes.runOnlyAtExecutionRoot>false</commons.changes.runOnlyAtExecutionRoot>

		<!-- scm publish plugin configuration -->
		<commons.site.cache>${user.home}/commons-sites</commons.site.cache>
		<!-- value modules can override it -->
		<commons.site.path>${commons.componentid}</commons.site.path>

		<commons.scmPubUrl>https://svn.apache.org/repos/infra/websites/production/commons/content/proper/${project.artifactId}</commons.scmPubUrl>
		<commons.scmPubCheckoutDirectory>${commons.site.cache}/${commons.site.path}</commons.scmPubCheckoutDirectory>
		<commons.scmPubServer>commons.site</commons.scmPubServer>

		<!-- allow japicmp's breakBuildOnBinaryIncompatibleModifications to be 
			overridden, plugin's default is false -->
		<commons.japicmp.breakBuildOnBinaryIncompatibleModifications>true</commons.japicmp.breakBuildOnBinaryIncompatibleModifications>
		<commons.japicmp.ignoreMissingClasses>false</commons.japicmp.ignoreMissingClasses>
		<!-- disable japicmp by default -->
		<japicmp.skip>true</japicmp.skip>

		<!-- Commons Release plugin: dist dev site -->
		<commons.distSvnStagingUrl>scm:svn:https://dist.apache.org/repos/dist/dev/commons/${commons.componentid}</commons.distSvnStagingUrl>

		<!-- Commons Release plugin: release manager -->
		<commons.releaseManagerName>${user.name}</commons.releaseManagerName>
		<commons.releaseManagerKey>DEADBEEF</commons.releaseManagerKey>

		<sonar.host.url>https://analysis.apache.org/</sonar.host.url>

	</properties>

	<groupId>com.ossez.codebank</groupId>
	<version>0.0.1</version>
</project>
